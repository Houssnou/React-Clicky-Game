{"version":3,"sources":["components/jumbotron.js","components/image.js","components/score.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["jumbotron","react_default","a","createElement","className","image","props","style","height","width","src","source","alt","name","onClick","imageClick","imageId","score","state","imageList","images","highestScore","isCorrect","imagesCopy","Object","toConsumableArray","_this","forEach","copy","id","isClicked","sort","Math","random","setState","newScore","alert","_this2","this","map","components_image","key","isclicked","React","Component","footer","App","components_jumbotron","components_score","components_footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ylCAceA,EAZC,WAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDACfH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,mDACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACdH,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,sRCOaE,EAdD,SAACC,GAMb,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAA0BG,MALnC,CACVC,OAAO,QACPC,MAAM,SAIAC,IAAKJ,EAAMK,OACXC,IAAKN,EAAMO,KACXC,QAAS,kBAAMR,EAAMS,WAAWT,EAAMU,oBCuF/BC,6MA5FbC,MAAQ,CACNC,UAAWC,EACXH,MAAO,EACPI,aAAc,KAGhBN,WAAa,SAACC,GAIZ,IAAIM,GAAY,EAGVC,EAAUC,OAAAC,EAAA,EAAAD,CAAOE,EAAKR,MAAMC,WAElCI,EAAWI,QAAQ,SAAAC,GACbZ,IAAYY,EAAKC,KACdD,EAAKE,UAKRR,GAAY,GAJZM,EAAKE,WAAY,EACjBR,GAAY,MAUdA,GAEFC,EAAWQ,KAAK,iBAAM,GAAMC,KAAKC,WAEjCP,EAAKQ,SAAS,CACZjB,MAAOS,EAAKR,MAAMD,MAAQ,EAC1BkB,SAAUT,EAAKR,MAAMD,MAAQ,EAC7BE,UAAWI,IAzBF,EA2BEG,EAAKR,MAAMG,cACtBK,EAAKQ,SAAS,CACZb,aAAaK,EAAKR,MAAMiB,aAO5BC,MAAM,aAENV,EAAKQ,SAAS,CACZb,aAAcK,EAAKR,MAAMD,MACzBA,MAAO,EACPE,UAAUC,EAAOW,KAAK,iBAAM,GAAMC,KAAKC,uFAKpC,IAAAI,EAAAC,KACCnB,EAAcmB,KAAKpB,MAAnBC,UAER,OACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,0BAAhB,UAAiDkC,KAAKpB,MAAMD,OAC3DhB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBAAhB,iBAAmDkC,KAAKpB,MAAMG,iBAKrEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACZe,EAAUoB,IAAI,SAAAlC,GACb,OACEJ,EAAAC,EAAAC,cAACqC,EAAD,CACEC,IAAKpC,EAAMwB,GACXb,QAASX,EAAMwB,GACfhB,KAAMR,EAAMQ,KACZF,OAAQN,EAAMM,OACd+B,UAAWrC,EAAMyB,UACjBf,WAAYsB,EAAKtB,yBApFf4B,IAAMC,WCUXC,EAZA,WACb,OACE5C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kDAChBH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uCCaO2C,EAbH,WAEV,OACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC4C,EAAD,MACA9C,EAAAC,EAAAC,cAAC6C,EAAD,MAEA/C,EAAAC,EAAAC,cAAC8C,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.126b1c65.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst jumbotron=()=>{\r\nreturn(\r\n  <div className=\"jumbotron bg-dark text-light my-2 p-1 text-center\">\r\n  <h1>React Clicky Game</h1>\r\n  <p className=\"lead\"> A simple memory challenge game made with React</p>\r\n  <hr className=\"my-2\"></hr>\r\n  <p>Rules</p>\r\n  <p> You loss when you click twice on the same image. You score 1 every time you click on the image that was not clicked. Highest score reflects you high score. You win when you are able to click on all 15 images on one game.</p>\r\n  </div>\r\n)\r\n}\r\n\r\nexport default jumbotron;","import React from 'react';\r\n\r\nconst image = (props) => {\r\n // console.log(props)\r\nconst style={\r\n  height:\"200px\",\r\n  width:\"200px\"\r\n}\r\n  return (   \r\n      <img className=\"img-thumbnail mr-3 mb-2\" style={style}\r\n        src={props.source}\r\n        alt={props.name}    \r\n        onClick={() => props.imageClick(props.imageId)} />    \r\n  )\r\n}\r\n\r\nexport default image;","import React from 'react';\r\nimport Image from './image';\r\nimport images from '../gems.json';\r\n\r\nclass score extends React.Component {\r\n\r\n  // Setting the initial state of the component number\r\n  state = {\r\n    imageList: images,\r\n    score: 0,\r\n    highestScore: 0\r\n  };\r\n  //function AddAndCheck\r\n  imageClick = (imageId) => {\r\n    //when a gem is clicked \r\n    //first check its isClicked value\r\n    //alert(imageId);\r\n    let isCorrect = false;\r\n    let newScore=0;\r\n    //create a new array of images\r\n    const imagesCopy = [...this.state.imageList];\r\n    //loop tru new copy to work on it\r\n    imagesCopy.forEach(copy => {\r\n      if (imageId === copy.id) {\r\n        if (!copy.isClicked) {\r\n          copy.isClicked = true;\r\n          isCorrect = true;          //\r\n          //alert(copy.isClicked)\r\n        } else {\r\n          isCorrect = false;\r\n        }\r\n      }\r\n    });\r\n    //alert(isCorrect);\r\n\r\n    //check if user won or no\r\n    if (isCorrect) {\r\n      //shuffle the array \r\n      imagesCopy.sort(() => 0.5 - Math.random());\r\n      //handle correct\r\n      this.setState({\r\n        score: this.state.score + 1,\r\n        newScore: this.state.score + 1,\r\n        imageList: imagesCopy\r\n      });\r\n      if (newScore>this.state.highestScore){\r\n        this.setState({\r\n          highestScore:this.state.newScore\r\n        })\r\n      };\r\n      if (newScore===12){\r\n        alert(\"You Won!\")\r\n      }\r\n    } else {\r\n      alert(\"You lost!\");\r\n      \r\n      this.setState({\r\n        highestScore: this.state.score,\r\n        score: 0,\r\n        imageList:images.sort(() => 0.5 - Math.random())\r\n      })\r\n    }\r\n  };\r\n  // The render method returns the JSX that should be rendered\r\n  render() {\r\n    const { imageList } = this.state;\r\n    //console.log(imageList);\r\n    return (\r\n      <div>\r\n        <div className=\"jumbotron bg-dark text-light my-2 p-2 text-center\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 text-right\">\r\n              <span className=\"badge badge-light mr-2\">Score: {this.state.score}</span>\r\n               <span className=\"badge badge-light\">Highest Score:{this.state.highestScore}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* images jumbotron */}\r\n        <div className=\"jumbotron my-2 p-2 ml-2\">\r\n          <div className=\"row justify-content-center ml-2\">\r\n            {imageList.map(image => {\r\n              return (\r\n                <Image\r\n                  key={image.id}\r\n                  imageId={image.id}\r\n                  name={image.name}\r\n                  source={image.source}\r\n                  isclicked={image.isClicked}\r\n                  imageClick={this.imageClick}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default score;","import React from 'react';\r\n\r\nconst footer = () => {\r\n  return (\r\n    <footer className=\"footer bg-dark text-light my-2 p-1 text-center\">\r\n      <div>\r\n        <span>\r\n          Copyright. Houssnou.\r\n          </span>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default footer;","import React from 'react';\nimport Jumbotron from './components/jumbotron';\nimport Score from './components/score';\n\nimport Footer from './components/footer';\n\nconst App = () => {\n \n  return (\n    <div className=\"container\">\n      <Jumbotron />\n      <Score /> \n      \n      <Footer />\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}